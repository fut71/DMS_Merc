1. game engine 클래스가 보유하고 있는 entt::registry m_registry 객체를
2. 엔티티를 이용하고 싶은 클래스 (예를 들어 opponent state machine 클래스)의 생성자에 entt::registry& _registry 를 추가해 참조자를 주입해준다.
3. 컴포넌트 뷰객체 생성
	auto view1 = m_registry.view<컴포넌트1, 컴포넌트2>(); 	// 컴포넌트 1,2를 모두 보유한 객체들을 탐색하는 뷰 객체
	auto view2 = m_registry.view<컴포넌트1, 컴포넌트3>(); 	// 컴포넌트 1,3을 모두 보유한 객체들을 탐색하는 뷰 객체

4. 실제 엔티티들의 컴포넌트 가져오기([Riun] 포인터로 바껴서 그 부분 수정함)
	for(auto& entity : view1)
	{
		auto& component1 = m_registry.get<컴포넌트1>(entity);		// 이런식으로 컴포넌트 객체를 가져오거나 ( 이 경우 컴포넌트가 무조건 있다는걸 가정함)
		if( auto component2 = m_registry.try_get<컴포넌트2>(entlty))	// 이런식으로 컴포넌트 객체의 포인터를 가져올 수 있습니다. (이 경우 컴포넌트가 있는지 검사 가능)
		{
			component1->멤버변수 = 값1;
			component2->멤버변수 = 값2;
			++2024.8.6. 추가[Riun]
			component->m_pOwner; 현재 component를 가진 entity를 가져올 수 있다. 이걸 통해 다른 component에도 접근이 가능하다.
		}
	}

5. 컴포넌트 생성시 주의사항
	/// <summary>
	/// 컴포넌트를 소유중인 엔티티의 이름/uid등을 알기 위해 생성자
	/// </summary>
	/// <param name="_owner"></param>
	Component(std::shared_ptr<Entity> _owner) :m_pOwner(_owner) {}

	/// <summary>
	/// 컴포넌트 복사 메서드	// 추후 툴에서 프리펩같은
	/// std::shared_ptr<Component> Clone() const override {	return std::make_shared<T>(*this);	}	// 클론 매서드를 정의 해줘야함
	/// </summary>
	/// <returns></returns>
	virtual std::shared_ptr<Component> Clone() const = 0;

6. 이벤트 등록 하는 방법
	/// <summary>
	/// 이벤트 리스너의 사용 예시 클래스입니다.
	/// </summary>
	class TestObject : public EventListener
	{
	public:
		TestObject(EventManager* _pEventManager)
			:EventListener(_pEventManager)
		{
			/// 이벤트 등록은 생성자에서 하면 안됩니다. Initialize() 등에서 하는걸로 하세용
			// 즉각적인 이벤트 등록
			REGISTER_IMMEDIATE_EVENT("TestImmediateEventHandler", TestImmediateEventHandler);
			// 지연된 이벤트 등록
			REGISTER_DELAYED_EVENT("TestDelayedEventHandler", TestDelayedEventHandler);
		}

		void Update()
		{
			// 즉각적인 이벤트 트리거
			m_pEventManager->TriggerEvent(Event("TestImmediateEventHandler"));
			// 지연된 이벤트를 이벤트 큐에 푸쉬
			m_pEventManager->PushDelayedEvent(Event("TestImmediateEventHandler"), 1);
		}

		// 즉각적으로 처리할 이벤트 핸들러 함수입니다.
		void TestImmediateEventHandler(const Event& _event)
		{
			DLOG(LOG_INFO, "TestImmediateEventHandler");
		}

		// 지연되게 처리할 이벤트 핸들러 함수입니다.
		void TestDelayedEventHandler(const Event& _event)
		{
			DLOG(LOG_INFO, "TestDelayedEventHandler");
		}

	};